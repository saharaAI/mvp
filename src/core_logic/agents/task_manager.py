# --- src/core_logic/task_manager.py ---
import re
from datetime import datetime
from .llm_interactions import LLMAgent

class TaskManager:
    """
    Manages the lifecycle of a financial analysis task, from initiation to completion.

    The `TaskManager` class coordinates the execution of financial analysis tasks by interacting with an
    `LLMAgent`. It orchestrates task execution by breaking down objectives into manageable sub-tasks,
    executing those sub-tasks, and generating a refined report based on the results.

    Attributes:
        llm_agent (LLMAgent): An instance of `LLMAgent` responsible for interacting with the LLMs.
    """

    def __init__(self, llm_agent: LLMAgent): 
        """
        Initializes the TaskManager with an LLMAgent instance.

        Args:
            llm_agent (LLMAgent): An instance of `LLMAgent` used for interacting with LLMs to perform tasks.
        """
        self.llm_agent = llm_agent

    def start_task(self, objective, balance_sheet_data=None, use_search=False):
        """
        Starts a new task and manages its execution from initiation to completion.

        This method initiates the task based on the provided objective and balance sheet data. It uses the
        `LLMAgent` to orchestrate the task by breaking it down into sub-tasks and executing those sub-tasks
        until the task is marked as complete. Optionally, it can use a search query to obtain additional information.

        Args:
            objective (str): The primary goal or objective of the financial analysis task.
            balance_sheet_data (str, optional): The balance sheet data to be analyzed. Defaults to None.
            use_search (bool, optional): Whether to use search queries to obtain additional information. Defaults to False.

        Returns:
            list of str: A list of formatted results from each sub-task, including prompts and responses.

        Raises:
            Exception: If there is an error in orchestrating or executing the task.
        """
        task_exchanges = []
        file_content_for_gpt = balance_sheet_data

        while True:
            previous_results = [result for _, result in task_exchanges]
            gpt_result, search_query = self.llm_agent.orchestrate_task(
                objective, file_content_for_gpt, previous_results, use_search
            )

            if "The task is complete:" in gpt_result:
                final_output = gpt_result.replace("The task is complete:", "").strip()
                break
            else:
                sub_task_prompt = gpt_result
                if file_content_for_gpt and not task_exchanges:
                    sub_task_prompt = f"{sub_task_prompt}\n\nFile content:\n{file_content_for_gpt}"
                sub_task_result = self.llm_agent.execute_sub_task(
                    sub_task_prompt, file_content_for_gpt, search_query
                )
                task_exchanges.append((sub_task_prompt, sub_task_result))
                file_content_for_gpt = None

        sub_task_results = [
            f"Orchestrator Prompt: {prompt}\nSub-agent Result: {result}"
            for prompt, result in task_exchanges
        ]

        return sub_task_results

    def generate_report(self, objective, sub_task_results):
        """
        Generates a refined report based on the sub-task results using the LLM.

        This method takes the results of the sub-tasks and uses the `LLMAgent` to provide expert insights,
        creating a comprehensive report that includes all the sub-task results.

        Args:
            objective (str): The primary goal or objective of the financial analysis task.
            sub_task_results (list of str): The results from each sub-task executed during the task.

        Returns:
            str: The refined report generated by the `LLMAgent` containing expert insights on the sub-task results.

        Raises:
            Exception: If there is an error in generating the report.
        """
        sanitized_objective = re.sub(r"\W+", "_", objective)
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        refined_output = self.llm_agent.provide_expert_insights("\n".join(sub_task_results))
        return refined_output
